{"version":3,"sources":["re_view/re_frame_simple.cljs"],"mappings":"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","names":["G__59978","G__59979","re-frame.core/reg-sub","p__59981","vec__59982","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","key","not-found","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__59985","G__59986","G__59987","p__59988","vec__59989","path","cljs.core/count","re-frame.db/app-db","G__59992","re-frame.core/subscribe","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","p__59995","vec__59996","parent","cljs.core/empty?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/last","G__59999","G__60000","p__60002","vec__60003","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__60015","vec__60017","seq__60018","cljs.core/seq","first__60019","cljs.core/first","cljs.core/next","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update","p__60032","vec__60033","seq__60034","first__60035","cljs.core/update-in","p__60037","vec__60039","seq__60040","first__60041","keyvals","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/assoc","p__60042","vec__60043","value","cljs.core/assoc-in","p__60046","vec__60047","seq__60048","first__60049","cljs.core/swap!","re-view.re-frame-simple/*in-query?*","var_args","G__60051","re-view.re-frame-simple/get","js/Error","cljs.core/deref","G__60052","G__60053","G__60058","re-view.re-frame-simple/get-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__60062","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","G__60063","re-view.re-frame-simple/identity","G__60064","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-view.re-frame-simple/update!","seq60068","self__4777__auto__","G__60069","re-frame.core/dispatch","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-view.re-frame-simple/update-in!","seq60071","G__60072","re-view.re-frame-simple/assoc!","seq60082","G__60083","re-view.re-frame-simple/assoc-in!","seq60084","G__60085","re-view.re-frame-simple/swap!","seq60086","G__60087","re-view.re-frame-simple/dispatch","re-view.re-frame-simple/dispatch-sync","re-frame.core/dispatch-sync"],"sourcesContent":["(ns re-view.re-frame-simple\n  (:refer-clojure :exclude [get get-in assoc! identity swap!] :rename {get    get*\n                                                                       get-in get-in*\n                                                                       swap!  swap!*})\n  (:require [re-frame.core :as rf]\n            [re-frame.db :refer [app-db]]\n            [reagent.ratom :as r])\n  (:require-macros re-view.re-frame-simple))\n\n(rf/reg-sub :get (fn [db [_ key not-found]]\n                   (get* db key not-found)))\n\n(rf/reg-sub :get-in\n\n            ;; `get-in` creates an intermediate subscription for each path segment.\n            ;; without this optimization, _every_ `get-in` listener would require\n            ;; an additional equality check when the db changes.\n\n            (fn [[_ path]]\n              (if (<= (count path) 1)\n                app-db\n                (rf/subscribe [:get-in (drop-last path)])))\n            (fn [parent [_ path]]\n              (if (empty? path)\n                parent\n                (get* parent (last path)))))\n\n(comment\n\n  ;; old version, did not use intermediate subscriptions\n  (rf/reg-sub :get-in (fn [db [_ path not-found]]\n                        (get-in* db path not-found))))\n\n(rf/reg-sub :identity (fn [db [_]] db))\n\n(rf/reg-event-db :update\n                 (fn [db [_ key f & args]]\n                   (apply update db key f args)))\n\n(rf/reg-event-db :update-in\n                 (fn [db [_ path f & args]]\n                   (apply update-in db path f args)))\n\n(rf/reg-event-db :assoc\n                 (fn [db [_ & keyvals]]\n                   (apply assoc db keyvals)))\n\n(rf/reg-event-db :assoc-in\n                 (fn [db [_ path value]]\n                   (assoc-in db path value)))\n\n(rf/reg-event-db :swap\n                 (fn [db [_ & args]]\n                   (apply swap!* db args)))\n\n(def ^:dynamic ^boolean *in-query?* false)\n\n(defn get\n  \"Read a value from db by `key`, not-found or nil if value not present.\"\n  ([key]\n   (if *in-query?*\n     (get* @app-db key)\n     @(rf/subscribe [:get key])))\n  ([key not-found]\n   (if *in-query?*\n     (get* @app-db key not-found)\n     @(rf/subscribe [:get key not-found]))))\n\n(defn get-in\n  \"Read a value from db by `path`, not-found or nil if value not present.\"\n  ([path]\n   (if *in-query?*\n     (get-in* @app-db path)\n     @(rf/subscribe [:get-in path])))\n  ([path not-found]\n   (if *in-query?*\n     (get-in* @app-db path not-found)\n     @(rf/subscribe [:get-in path not-found]))))\n\n(defn identity\n  \"Return current value of db\"\n  []\n  (if *in-query?*\n    @app-db\n    @(rf/subscribe [:identity])))\n\n(defn update!\n  \"Applies update to db with args\"\n  [& args]\n  (rf/dispatch (into [:update] args)))\n\n(defn update-in!\n  \"Applies update-in to db with args\"\n  [& args]\n  (rf/dispatch (into [:update-in] args)))\n\n(defn assoc!\n  \"Applies assoc to db with args\"\n  [& args]\n  (rf/dispatch (into [:assoc] args)))\n\n(defn assoc-in!\n  \"Applies assoc-in to db with args\"\n  [& args]\n  (rf/dispatch (into [:assoc-in] args)))\n\n(defn swap!\n  \"Applies swap! to db with args.\"\n  [& args]\n  (rf/dispatch (into [:swap] args)))\n\n(def dispatch \"Dispatch a re-frame event.\" rf/dispatch)\n(def dispatch-sync \"Synchronous version of `dispatch`\" rf/dispatch-sync)\n\n"]}