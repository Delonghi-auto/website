{"version":3,"sources":["shadow_re_frame/simple.cljs"],"mappings":"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","names":["shadow-re-frame.simple/counter","id","p1__60552#","total","re_view.re_frame_simple.get_in.cljs$core$IFn$_invoke$arity$1","re_view.re_frame_simple.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/inc","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__60553","vec__60554","_","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","cljs.core/shuffle","p__60557","vec__60558","cljs.core/assoc-in","cljs.core/peek","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/pop","p__60561","vec__60562","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.core/reg-sub-raw","p__60565","vec__60566","reagent.ratom/make-reaction","*in-query?*-orig-val__60569","re-view.re-frame-simple/*in-query?*","*in-query?*-temp-val__60570","args__59957__auto__","cljs.core/deref","G__60571","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-frame.core/subscribe","shadow-re-frame.simple/counter-ids","re_view.re_frame_simple.get.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","shadow-re-frame.simple/divider","shadow-re-frame.simple/root-view","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__60574","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__60576","cljs.core/chunk-buffer","i__60575","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60573","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","G__60577","re-view.re-frame-simple/dispatch","G__60578","p1__60572#","sample-input","re_view.re_frame_simple.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic","or__4185__auto__","shadow-re-frame.simple/render","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document.getElementById","shadow-re-frame.simple/init","G__60579","G__60580","cljs.core/chunk-first"],"sourcesContent":["(ns shadow-re-frame.simple\n  \"Example of `re-frame-simple`, an alternate `re-frame` syntax for simple use cases.\"\n  (:require\n   [re-view.re-frame-simple :as db]\n   [reagent.core :as reagent]\n   [shadow-re-frame.welcome :as text]))\n\n;;\n;; For a complete introduction to `re-view.re-frame-simple`, see the readme:\n;; https://github.com/braintripping/re-view/blob/master/re-frame-simple/README.md\n;;\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; A COUNTER\n;;\n;; Example of...\n;;\n;; 1. Reading data using `db/get-in`\n;;\n;; 2. Writing data using `db/update-in!`\n;;\n;;\n\n\n(defn counter\n  \"Given a counter id, render it as an interactive widget.\"\n  [id]\n\n  ;; NOTICE: `db/get-in`\n  (let [total (db/get-in [:counters id])]\n\n    ;; NOTICE: `db/update-in!`\n    [:div.button {:on-mouse-down #(do\n                                    (.preventDefault %)\n                                    (db/update-in! [:counters id] inc))}\n     total\n     [:br]\n     (if (pos? total)\n       (take total (repeat id))\n       [:span {:style {:color \"#888\"}} \"click me!\"])]))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; NAMED UPDATES\n;;\n;; `defupdate` associates a keyword with an update function.\n;;  this can be dispatched like any other re-frame handler.\n;;\n\n(db/defupdate :initialize\n              \"Initialize the `db` with the preselected emoji as counter IDs.\"\n              [db]\n              {:counter-ids (shuffle [\"\ud83d\udc79\" \"\ud83d\udc7a\" \"\ud83d\udca9\" \"\ud83d\udc7b\ud83d\udc80\ufe0f\"\n                                       \"\ud83d\udc7d\" \"\ud83d\udc7e\" \"\ud83e\udd16\" \"\ud83c\udf83\"\n                                       \"\ud83d\ude3a\" \"\ud83d\udc4f\" \"\ud83d\ude4f\" \"\ud83d\udc45\"\n                                       \"\ud83d\udc42\" \"\ud83d\udc43\" \"\ud83d\udc63\" \"\ud83d\udc41\"\n                                       \"\ud83d\udc40\" \"\ud83d\udc68\u200d\" \"\ud83d\ude92\" \"\ud83d\udc69\u200d\u2708\ufe0f\"\n                                       \"\ud83d\udc5e\" \"\ud83d\udc53\" \"\u2602\ufe0f\" \"\ud83c\udf88\"\n                                       \"\ud83d\udcdc\" \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" \"\ud83d\udea3\" \"\ud83c\udfc7\"]\n                                     )\n               })\n\n(db/defupdate :new-counter\n              \"Create a new counter, using an ID from the pre-selected emoji.\"\n              [db]\n              (-> db\n                  (assoc-in [:counters (peek (:counter-ids db))] 0)\n                  (update :counter-ids pop)))\n\n(db/defupdate :add-emoji\n              [db]\n              (-> db\n                  (update :counter-ids conj (get db :sample-input))\n                  (dissoc :sample-input)\n                  ))\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Named queries\n;;\n;; use `defquery` to create named queries that read data using\n;; `db/get` and `db/get-in`.\n;;\n;; `defquery` def's an ordinary Clojure function:\n;;\n\n\n(db/defquery counter-ids\n             \"Return the list of counters in the db, by id.\"\n             []\n             (-> (db/get :counters)\n                 (keys)))\n\n;;\n;; a component that uses the query will update when its data changes.\n;;\n\n(def divider [:div.font-large\n              {:style {:margin \"2rem 0 1rem\"}}\n              \"\u3030\ufe0f\u3030\ufe0f\u3030\ufe0f\u3030\ufe0f\u3030\ufe0f\u3030\ufe0f\u3030\ufe0f\"])\n\n(defn root-view\n  \"Render the page\"\n  []\n  [:div.root-layout\n\n   [:div.font-large {:style {:margin \"1rem 0\"}} \"Welcome Dani!\"]\n\n\n   (doall (for [id (counter-ids)]\n            ^{:key id} [counter id]))\n\n   [:div.button\n    {:on-click #(db/dispatch [:new-counter])\n     :style {:background \"pink\"}}\n    \"Add Counter\"]\n\n[:div.button\n    {:on-click #(db/dispatch [:add-emoji])\n     :style {:background \"green\"}}\n    \"Add Emoji\"]\n\n   (let [sample-input (db/get :sample-input)]\n     [:div.text-example\n      {:style {:margin \"2.5rem 0 0\"}}\n      [:input {:value sample-input\n               :placeholder \"Your name\"\n               :on-change #(db/assoc! :sample-input (.. % -target -value))}]\n      [:div \"Hello, \" (or sample-input \"____\")]])\n\n   divider\n\n\n   ])\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Boilerplate code to get the page to render:\n\n(defn ^:dev/after-load render []\n  (reagent/render [root-view]\n                  (js/document.getElementById \"shadow-re-frame\")))\n\n(defn init []\n\n  ;; initialize the db, create an example counter\n  (db/dispatch [:initialize])\n  (db/dispatch [:new-counter])\n  ;; render to page\n  (render))\n"]}